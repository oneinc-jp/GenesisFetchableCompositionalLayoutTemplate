//
//  {{ module_name }}Presenter
//  {{ project_name }}
//
//  Created by {{ developer_name }} on {{ date }}.
//

import Combine
import CompositionalLayoutViewController
import CompositionalLayoutViewControllerExtension
{% if async_method == "Promises" %}
import CompositionalLayoutViewControllerFetchableExtensionPromises
import Promises
{% else %}
import CompositionalLayoutViewControllerFetchableExtension
{% endif %}
import UIKit

{% if async_method == "Promises" %}
typealias {{ module_name }}PresenterInputInterface = CollectionViewFetchablePresenterPromisesInput
{% else %}
typealias {{ module_name }}PresenterInputInterface = CollectionViewFetchablePresenterInput
{% endif %}

@MainActor
protocol {{ module_name }}PresenterInput: CollectionViewPresenterInput, {{ module_name }}PresenterInputInterface {
    // MARK: View Life-Cycle methods
    func viewDidLoad()

    // MARK: Other methods called from View
}

final class {{ module_name }}Presenter {

    // MARK: Lifecycle

    init(view: {{ module_name }}ViewInput, interactor: {{ module_name }}InteractorInput, router: {{ module_name }}RouterInput) {
        self.view = view
        self.interactor = interactor
        self.router = router
    }

    // MARK: Internal

    // MARK: Internal Stored instance properties

    weak var view: {{ module_name }}ViewInput!
    var interactor: {{ module_name }}InteractorInput!
    var router: {{ module_name }}RouterInput!
    @Published var isLoading = false

    // MARK: Internal Computed instance properties

    // MARK: Internal methods

    // MARK: Private

    // MARK: Private Stored instance properties

    // MARK: Private Computed instance properties

    // MARK: Private methods
}

extension {{ module_name }}Presenter: {{ module_name }}PresenterInput {
    var isLoadingPublisher: Published<Bool>.Publisher {
        return $isLoading
    }

    var sections: [CollectionViewSection] {
        return interactor.sections
    }

    func viewDidLoad() {
        fetch()
    }

    func section(for sectionIndex: Int) -> CollectionViewSection {
        return interactor.section(for: sectionIndex)
    }

    func didItemSelect(indexPath: IndexPath) {
        // TODO:
    }

{% if async_method == "Promises" %}
    @discardableResult
    func fetch(force: Bool = true) -> Promise<Void> {
        let promise = Promise<Void>.pending()
        interactor.fetch(force: force).then { [weak self] sections in
            guard let self else {
                return
            }
            self.view.update(sections: sections)
            promise.fulfill(())
        }.catch { error in
            // TODO: handle error
            promise.reject(error)
        }
        return promise
    }
{% else %}
    func fetch(force: Bool) {
        Task { [weak view] in
            isLoading = true
            do {
                let sections = try await interactor.fetch(force: force)
                await view?.update(sections: sections)
            }
            catch {
                // TODO: handle error
            }
            isLoading = false
        }
    }
{% endif %}
}

extension {{ module_name }}Presenter: {{ module_name }}InteractorOutput {
{% if async_method == "Promises" %}
    func willFetchStart() {
        isLoading = true
    }

    func willFetchEnd() {
        isLoading = false
    }

    func didFetchEnd() {
        isLoading = false
    }
{% endif %}
}
