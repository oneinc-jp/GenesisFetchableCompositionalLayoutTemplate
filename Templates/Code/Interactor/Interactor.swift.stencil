//
//  {{ module_name }}Interactor
//  {{ project_name }}
//
//  Created by {{ developer_name }} on {{ date }}.
//

import CompositionalLayoutViewController
import CompositionalLayoutViewControllerExtension
{% if async_method == "Promises" %}
import CompositionalLayoutViewControllerFetchableExtensionPromises
import Promises
{% else %}
import CompositionalLayoutViewControllerFetchableExtension
{% endif %}
import Foundation

{% if async_method == "Promises" %}
typealias {{ module_name }}InteractorInputInterface = CollectionViewFetchableInteractorPromisesInput
{% else %}
typealias {{ module_name }}InteractorInputInterface = CollectionViewFetchableInteractorInput
{% endif %}

protocol {{ module_name }}InteractorInput: {{ module_name }}InteractorInputInterface {
    // MARK: Methods for modifying repository
}

{% if async_method == "Promises" %}
protocol {{ module_name }}InteractorOutput: CollectionViewFetchableInteractorPromisesOutput {
{% else %}
protocol {{ module_name }}InteractorOutput: AnyObject {
{% endif %}
    // MARK: Callback methods for presenter
}

final class {{ module_name }}Interactor {
    // MARK: Lifecycle

    init(repository: {{ module_name }}RepositoryInterface) {
        self.repository = repository
    }

    // MARK: Internal

    // MARK: Internal Stored instance properties

    weak var presenter: {{ module_name }}InteractorOutput!
    var sections: [CollectionViewSection]?

    // MARK: Internal Computed instance properties

    // MARK: Internal methods

    // MARK: Private

    // MARK: Private Stored instance properties

    private var repository: {{ module_name }}RepositoryInterface

    // MARK: Private Computed instance properties

    // MARK: Private methods

}

extension {{ module_name }}Interactor: {{ module_name }}InteractorInput {
{% if async_method == "Promises" %}
    @discardableResult
    func fetch(force: Bool) -> Promise<[CollectionViewSection]> {
        let promise = Promise<[CollectionViewSection]>.pending()
        presenter.prepareFetch(.init {
            self.repository.fetch(force: force).then { [weak self] result in
                guard let self else {
                    return
                }
                self.presenter.willFetchEnd()
                // TODO: store sections
                // self.sections = ...
                promise.fulfill(self.sections)
            }.catch { error in
                promise.reject(error)
            }
        })
        return promise
    }
{% else %}
    func fetch(force: Bool = true) async throws -> [CollectionViewSection] {
        let result = try await repository.fetch(force: force)
        await MainActor.run(body: {
            // TODO: store sections
            // sections = ...
        })
        return sections
    }
{% endif %}
}